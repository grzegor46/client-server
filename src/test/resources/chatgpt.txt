import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

class UserManagementTest {

    private UserManagement userManagement;
    private Stream mockStream;
    private MessageManagement mockMessageManagement;

    @BeforeEach
    void setUp() {
        mockStream = mock(Stream.class);
        mockMessageManagement = mock(MessageManagement.class);
        Instant instant = Instant.now();
        userManagement = new UserManagement(mockStream, "2024-01-29", instant);
        userManagement.messageManagement = mockMessageManagement;
    }

    @Test
    void takeRequest_helpCommand_shouldPrintHelpMessage() throws IOException {
        // Arrange
        when(mockStream.bufferedReader.readLine()).thenReturn("help");

        // Act
        userManagement.takeRequest("help");

        // Assert
        verify(mockStream.printWriter, times(1)).println(ServerMessage.getHelp());
    }

    @Test
    void takeRequest_invalidCommand_shouldPrintInvalidCommandMessage() throws IOException {
        // Arrange
        when(mockStream.bufferedReader.readLine()).thenReturn("invalidCommand");

        // Act
        userManagement.takeRequest("invalidCommand");

        // Assert
        verify(mockStream.printWriter, times(1)).println("There is no such command");
    }

    @Test
    void loginUser_validCredentials_shouldLoginUser() throws IOException {
        // Arrange
        when(mockStream.bufferedReader.readLine()).thenReturn("login", "testUser", "password");
        when(mockMessageManagement.checkMailBox(any())).thenReturn(new ArrayList<>());

        // Act
        userManagement.loginUser();

        // Assert
        assertEquals("testUser", UserManagement.activeUser.getNickName());
    }

    @Test
    void loginUser_invalidCredentials_shouldPrintErrorMessage() throws IOException {
        // Arrange
        when(mockStream.bufferedReader.readLine()).thenReturn("login", "invalidUser", "invalidPassword");

        // Act
        userManagement.loginUser();

        // Assert
        verify(mockStream.printWriter, times(1)).println("there is no such user in DB or incorrect password");
    }

    @Test
    void deleteUser_adminUser_shouldDeleteUser() throws IOException {
        // Arrange
        User adminUser = new User("adminUser", "adminPassword", Role.ADMIN);
        UserManagement.activeUser = adminUser;
        when(mockStream.bufferedReader.readLine()).thenReturn("testUser");

        // Act
        userManagement.deleteUser();

        // Assert
        verify(mockStream.printWriter, times(1)).println("user deleted");
    }

    @Test
    void deleteUser_nonAdminUser_shouldPrintPermissionErrorMessage() throws IOException {
        // Arrange
        User nonAdminUser = new User("nonAdminUser", "password", Role.USER);
        UserManagement.activeUser = nonAdminUser;

        // Act
        userManagement.deleteUser();

        // Assert
        verify(mockStream.printWriter, times(1)).println("you don't have permission");
    }

    @Test
    void getUsers_loggedInUser_shouldPrintListOfUsers() {
        // Arrange
        User loggedInUser = new User("loggedInUser", "password", Role.USER);
        UserManagement.activeUser = loggedInUser;

        // Act
        userManagement.getUsers();

        // Assert
        verify(mockStream.printWriter, times(1)).println(anyString());
    }

    // Dodaj kolejne testy dla pozostałych metod w klasie UserManagement w podobny sposób.
    // Pamiętaj, aby używać mocków tam, gdzie to możliwe, aby izolować testowany kod od rzeczywistych zależności.

}
